import requests, os, time, socket, json

# Renkler
class Renk:
    YEŞİL = '\033[92m'
    KIRMIZI = '\033[91m'
    SARI = '\033[93m'
    MAVİ = '\033[96m'
    BİTİR = '\033[0m'

# 50+ site listesi
siteler = {
    "GitHub": "https://github.com/{}",
    "Instagram": "https://www.instagram.com/{}",
    "Twitter": "https://twitter.com/{}",
    "Reddit": "https://www.reddit.com/user/{}",
    "TikTok": "https://www.tiktok.com/@{}",
    "Facebook": "https://www.facebook.com/{}",
    "Twitch": "https://www.twitch.tv/{}",
    "Pinterest": "https://www.pinterest.com/{}",
    "Steam": "https://steamcommunity.com/id/{}",
    "YouTube": "https://www.youtube.com/{}",
    "DeviantArt": "https://www.deviantart.com/{}",
    "Flickr": "https://www.flickr.com/people/{}",
    "Vimeo": "https://vimeo.com/{}",
    "SoundCloud": "https://soundcloud.com/{}",
    "Medium": "https://medium.com/@{}",
    "Disqus": "https://disqus.com/by/{}",
    "Spotify": "https://open.spotify.com/user/{}",
    "WordPress": "https://{}.wordpress.com",
    "Roblox": "https://www.roblox.com/user.aspx?username={}",
    "Replit": "https://replit.com/@{}",
    "Codepen": "https://codepen.io/{}",
    "BuyMeACoffee": "https://www.buymeacoffee.com/{}",
    "HackerOne": "https://hackerone.com/{}",
    "Trello": "https://trello.com/{}",
    "Kaggle": "https://www.kaggle.com/{}",
    "AskFM": "https://ask.fm/{}",
    "Ok.ru": "https://ok.ru/{}",
    "MyAnimeList": "https://myanimelist.net/profile/{}",
    "Last.fm": "https://www.last.fm/user/{}",
    "Behance": "https://www.behance.net/{}",
    "Gravatar": "https://en.gravatar.com/{}",
    "500px": "https://500px.com/{}",
    "ProductHunt": "https://www.producthunt.com/@{}",
    "Snapchat": "https://www.snapchat.com/add/{}",
    "Bandcamp": "https://{}.bandcamp.com",
    "Bitbucket": "https://bitbucket.org/{}",
    "Gitee": "https://gitee.com/{}",
    "Flipboard": "https://flipboard.com/@{}",
    "Canva": "https://www.canva.com/{}",
    "Fandom": "https://{}.fandom.com",
    "Pastebin": "https://pastebin.com/u/{}",
    "Strava": "https://www.strava.com/athletes/{}",
    "Letterboxd": "https://letterboxd.com/{}",
    "Sketchfab": "https://sketchfab.com/{}",
    "Ello": "https://ello.co/{}",
    "Unsplash": "https://unsplash.com/@{}",
    "Lichess": "https://lichess.org/@/{}",
    "Chess.com": "https://www.chess.com/member/{}",
    "Blogger": "https://{}.blogspot.com"
}

def temizle():
    os.system("cls" if os.name == "nt" else "clear")

def usercan():
    temizle()
    kullanici = input("🔤 Kullanıcı adı gir: ").strip()
    if not kullanici: return
    print(Renk.MAVİ + f"\n🔎 '{kullanici}' için tarama başlıyor...\n" + Renk.BİTİR)
    bulunanlar = []
    for isim, url in siteler.items():
        link = url.format(kullanici)
        try:
            r = requests.get(link, timeout=5)
            if r.status_code == 200:
                print(f"{Renk.YEŞİL}[✓] {isim}: {link}{Renk.BİTİR}")
                bulunanlar.append(link)
            else:
                print(f"{Renk.KIRMIZI}[×] {isim}{Renk.BİTİR}")
        except:
            print(f"{Renk.SARI}[!] {isim}: Bağlantı hatası{Renk.BİTİR}")
        time.sleep(0.1)
    if bulunanlar:
        with open(f"{kullanici}_bulunanlar.txt", "w") as f:
            f.write("\n".join(bulunanlar))
        print(Renk.MAVİ + f"\n📁 '{kullanici}_bulunanlar.txt' dosyasına kaydedildi.\n" + Renk.BİTİR)
    input("↩️ Menüye dönmek için Enter...")

def sitecheck():
    temizle()
    
    ip = input("📡 IP adresi gir: ").strip()
    try:
        veri = requests.get(f"http://ip-api.com/json/{ip}").json()
        if veri["status"] == "fail":
            print(Renk.KIRMIZI + "❌ IP bilgisi alınamadı." + Renk.BİTİR)
            return
        print(Renk.MAVİ + f"\n🌍 Ülke: {veri['country']}, {veri['city']}")
        print(f"📡 IP: {veri['query']}")
        print(f"🏢 ISS: {veri['isp']}")
        print(f"🔍 VPN mi?: {'Evet' if any(x in veri['isp'].lower() for x in ['vpn','host','cloud']) else 'Hayır'}" + Renk.BİTİR)
    except:
        print(Renk.KIRMIZI + "Hata oluştu." + Renk.BİTİR)
    input("\n↩️ Menüye dönmek için Enter...")
import requests

def header_analiz(url):
    print(f"\n🔎 {url} adresine istek gönderiliyor...\n")
    try:
        r = requests.get(url, timeout=7)
        headers = r.headers

        print("➡️ Header Bilgileri:")
        for k, v in headers.items():
            print(f"  {k}: {v}")

        print("\n⚠️ Güvenlik Kontrolü:")

        # Content-Security-Policy kontrolü
        csp = headers.get("Content-Security-Policy")
        if csp:
            print("✅ Content-Security-Policy var.")
        else:
            print("❌ Content-Security-Policy (CSP) bulunamadı! XSS açığı riski olabilir.")

        # X-XSS-Protection kontrolü
        x_xss = headers.get("X-XSS-Protection")
        if x_xss == "0":
            print("⚠️ X-XSS-Protection devre dışı bırakılmış (0). Güvenlik riskli olabilir.")
        elif x_xss:
            print(f"✅ X-XSS-Protection: {x_xss}")
        else:
            print("❌ X-XSS-Protection header'ı yok. XSS savunması zayıf olabilir.")

        # Set-Cookie HttpOnly ve Secure kontrolü (kısmi kontrol)
        set_cookie = headers.get("Set-Cookie")
        if set_cookie:
            if "HttpOnly" in set_cookie and "Secure" in set_cookie:
                print("✅ Set-Cookie'da HttpOnly ve Secure var.")
            else:
                print("⚠️ Set-Cookie'da HttpOnly veya Secure eksik olabilir.")
        else:
            print("❌ Set-Cookie header'ı yok. Çerez güvenliği sorgulanmalı.")

        # Server bilgisi (versiyon bilgisi kontrolü)
        server = headers.get("Server")
        if server:
            if any(c in server.lower() for c in ["apache", "nginx", "iis", "tomcat"]):
                print(f"⚠️ Server bilgisi açık: {server}. Versiyon bilgisi olabilir, bu risk oluşturabilir.")
            else:
                print(f"✅ Server bilgisi maskelenmiş veya özel: {server}")
        else:
            print("✅ Server header'ı yok, iyi.")

        # Referrer-Policy kontrolü
        ref_policy = headers.get("Referrer-Policy")
        if ref_policy:
            print(f"✅ Referrer-Policy: {ref_policy}")
        else:
            print("⚠️ Referrer-Policy yok. Veri sızıntısı riski olabilir.")

        # HSTS kontrolü
        hsts = headers.get("Strict-Transport-Security")
        if hsts:
            print(f"✅ HSTS aktif: {hsts}")
        else:
            print("⚠️ HSTS yok! HTTPS kullanımı tam güvenli olmayabilir.")

        print("\n🔚 Analiz tamamlandı.\n")

    except Exception as e:
        print(f"❌ Hata oluştu: {e}")

# Örnek kullanım:
# header_analiz("https://www.google.com")
def menu():
    while True:
        temizle()
        print(Renk.MAVİ + "=== GTX-L-NKSCANNER v2 ===\n" + Renk.BİTİR)
        print("1) Usercan (50+ site kullanıcı adı taraması)")
        print("2) Site analiz aracı (URL üzerinden)")
        print("3) IP analiz ve VPN kontrol")
        print("4) Çıkış\n")
        secim = input("Seçimin (1-4): ").strip()
        if secim == "1": usercan()
        elif secim == "2": sitecheck()
        elif secim == "3": ipanaliz()
        elif secim == "4":
            print("👋 Görüşürüz kanka!")
            break
        else:
            print(Renk.KIRMIZI + "Geçersiz seçim!" + Renk.BİTİR)
            time.sleep(1)

if __name__ == "__main__":
    menu()
